//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace CooperAtkins.NotificationEngine.Utility.Notify {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PhoneNotifySoap", Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class PhoneNotify : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnSoundFileIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSoundFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameSoundFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSoundFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSoundFileLengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSoundFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTTSInULAWOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTTSInMP3OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSoundFileInMP3OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSoundFileURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSoundFileInUlawOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordSoundViaPhoneCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueueIDStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueueIDStatusesByPhoneNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueueIDStatusWithAdvancedInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneEnglishBasicOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneBasicWithTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleQueueIdStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneBasicOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneBasicWithTryCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyPhoneAdvancedOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyMultiplePhoneBasicOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyMultiplePhoneBasicWithCPMOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyMultiplePhoneBasicWithCPMandReferenceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyMultiplePhoneAdvancedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelConferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelNotifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelNotifyByReferenceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScriptListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScriptSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScriptDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScriptLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback LicenseKeyVariableLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback LicenseKeyVariableSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_GetListIDsByLicensekeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_GetListMembersByListIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_DialListOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_DialListAdvancedOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_AddNewListOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_AddListMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_DeleteListOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_DeleteListMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_AlterListMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback LM_AlterListIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResponseCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableAreaCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableIncomingNumbersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssignedNumbersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVoicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignIncomingNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIncomingCallScriptOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIncomingCallScriptOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PhoneNotify() {
            this.Url = global::CooperAtkins.NotificationEngine.Utility.Properties.Settings.Default.Utility_Notify_PhoneNotify;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetVersionCompletedEventHandler GetVersionCompleted;
        
        /// <remarks/>
        public event ReturnSoundFileIDsCompletedEventHandler ReturnSoundFileIDsCompleted;
        
        /// <remarks/>
        public event RemoveSoundFileCompletedEventHandler RemoveSoundFileCompleted;
        
        /// <remarks/>
        public event RenameSoundFileCompletedEventHandler RenameSoundFileCompleted;
        
        /// <remarks/>
        public event UploadSoundFileCompletedEventHandler UploadSoundFileCompleted;
        
        /// <remarks/>
        public event GetSoundFileLengthCompletedEventHandler GetSoundFileLengthCompleted;
        
        /// <remarks/>
        public event GetSoundFileCompletedEventHandler GetSoundFileCompleted;
        
        /// <remarks/>
        public event GetTTSInULAWCompletedEventHandler GetTTSInULAWCompleted;
        
        /// <remarks/>
        public event GetTTSInMP3CompletedEventHandler GetTTSInMP3Completed;
        
        /// <remarks/>
        public event GetSoundFileInMP3CompletedEventHandler GetSoundFileInMP3Completed;
        
        /// <remarks/>
        public event GetSoundFileURLCompletedEventHandler GetSoundFileURLCompleted;
        
        /// <remarks/>
        public event GetSoundFileInUlawCompletedEventHandler GetSoundFileInUlawCompleted;
        
        /// <remarks/>
        public event RecordSoundViaPhoneCallCompletedEventHandler RecordSoundViaPhoneCallCompleted;
        
        /// <remarks/>
        public event GetQueueIDStatusCompletedEventHandler GetQueueIDStatusCompleted;
        
        /// <remarks/>
        public event GetQueueIDStatusesByPhoneNumberCompletedEventHandler GetQueueIDStatusesByPhoneNumberCompleted;
        
        /// <remarks/>
        public event GetQueueIDStatusWithAdvancedInfoCompletedEventHandler GetQueueIDStatusWithAdvancedInfoCompleted;
        
        /// <remarks/>
        public event NotifyPhoneEnglishBasicCompletedEventHandler NotifyPhoneEnglishBasicCompleted;
        
        /// <remarks/>
        public event NotifyPhoneBasicWithTransferCompletedEventHandler NotifyPhoneBasicWithTransferCompleted;
        
        /// <remarks/>
        public event GetMultipleQueueIdStatusCompletedEventHandler GetMultipleQueueIdStatusCompleted;
        
        /// <remarks/>
        public event NotifyPhoneBasicCompletedEventHandler NotifyPhoneBasicCompleted;
        
        /// <remarks/>
        public event NotifyPhoneBasicWithTryCountCompletedEventHandler NotifyPhoneBasicWithTryCountCompleted;
        
        /// <remarks/>
        public event NotifyPhoneAdvancedCompletedEventHandler NotifyPhoneAdvancedCompleted;
        
        /// <remarks/>
        public event NotifyMultiplePhoneBasicCompletedEventHandler NotifyMultiplePhoneBasicCompleted;
        
        /// <remarks/>
        public event NotifyMultiplePhoneBasicWithCPMCompletedEventHandler NotifyMultiplePhoneBasicWithCPMCompleted;
        
        /// <remarks/>
        public event NotifyMultiplePhoneBasicWithCPMandReferenceIDCompletedEventHandler NotifyMultiplePhoneBasicWithCPMandReferenceIDCompleted;
        
        /// <remarks/>
        public event NotifyMultiplePhoneAdvancedCompletedEventHandler NotifyMultiplePhoneAdvancedCompleted;
        
        /// <remarks/>
        public event CancelConferenceCompletedEventHandler CancelConferenceCompleted;
        
        /// <remarks/>
        public event CancelNotifyCompletedEventHandler CancelNotifyCompleted;
        
        /// <remarks/>
        public event CancelNotifyByReferenceIDCompletedEventHandler CancelNotifyByReferenceIDCompleted;
        
        /// <remarks/>
        public event ScriptListCompletedEventHandler ScriptListCompleted;
        
        /// <remarks/>
        public event ScriptSaveCompletedEventHandler ScriptSaveCompleted;
        
        /// <remarks/>
        public event ScriptDeleteCompletedEventHandler ScriptDeleteCompleted;
        
        /// <remarks/>
        public event ScriptLoadCompletedEventHandler ScriptLoadCompleted;
        
        /// <remarks/>
        public event LicenseKeyVariableLoadCompletedEventHandler LicenseKeyVariableLoadCompleted;
        
        /// <remarks/>
        public event LicenseKeyVariableSaveCompletedEventHandler LicenseKeyVariableSaveCompleted;
        
        /// <remarks/>
        public event LM_GetListIDsByLicensekeyCompletedEventHandler LM_GetListIDsByLicensekeyCompleted;
        
        /// <remarks/>
        public event LM_GetListMembersByListIDCompletedEventHandler LM_GetListMembersByListIDCompleted;
        
        /// <remarks/>
        public event LM_DialListCompletedEventHandler LM_DialListCompleted;
        
        /// <remarks/>
        public event LM_DialListAdvancedCompletedEventHandler LM_DialListAdvancedCompleted;
        
        /// <remarks/>
        public event LM_AddNewListCompletedEventHandler LM_AddNewListCompleted;
        
        /// <remarks/>
        public event LM_AddListMemberCompletedEventHandler LM_AddListMemberCompleted;
        
        /// <remarks/>
        public event LM_DeleteListCompletedEventHandler LM_DeleteListCompleted;
        
        /// <remarks/>
        public event LM_DeleteListMemberCompletedEventHandler LM_DeleteListMemberCompleted;
        
        /// <remarks/>
        public event LM_AlterListMemberCompletedEventHandler LM_AlterListMemberCompleted;
        
        /// <remarks/>
        public event LM_AlterListIDCompletedEventHandler LM_AlterListIDCompleted;
        
        /// <remarks/>
        public event GetResponseCodesCompletedEventHandler GetResponseCodesCompleted;
        
        /// <remarks/>
        public event GetAvailableAreaCodesCompletedEventHandler GetAvailableAreaCodesCompleted;
        
        /// <remarks/>
        public event GetAvailableIncomingNumbersCompletedEventHandler GetAvailableIncomingNumbersCompleted;
        
        /// <remarks/>
        public event GetAssignedNumbersCompletedEventHandler GetAssignedNumbersCompleted;
        
        /// <remarks/>
        public event getVoicesCompletedEventHandler getVoicesCompleted;
        
        /// <remarks/>
        public event AssignIncomingNumberCompletedEventHandler AssignIncomingNumberCompleted;
        
        /// <remarks/>
        public event SetIncomingCallScriptCompletedEventHandler SetIncomingCallScriptCompleted;
        
        /// <remarks/>
        public event GetIncomingCallScriptCompletedEventHandler GetIncomingCallScriptCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetVersion", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersion() {
            object[] results = this.Invoke("GetVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionAsync(object userState) {
            if ((this.GetVersionOperationCompleted == null)) {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }
        
        private void OnGetVersionOperationCompleted(object arg) {
            if ((this.GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/ReturnSoundFileIDs", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] ReturnSoundFileIDs(string LicenseKey) {
            object[] results = this.Invoke("ReturnSoundFileIDs", new object[] {
                        LicenseKey});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ReturnSoundFileIDsAsync(string LicenseKey) {
            this.ReturnSoundFileIDsAsync(LicenseKey, null);
        }
        
        /// <remarks/>
        public void ReturnSoundFileIDsAsync(string LicenseKey, object userState) {
            if ((this.ReturnSoundFileIDsOperationCompleted == null)) {
                this.ReturnSoundFileIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnSoundFileIDsOperationCompleted);
            }
            this.InvokeAsync("ReturnSoundFileIDs", new object[] {
                        LicenseKey}, this.ReturnSoundFileIDsOperationCompleted, userState);
        }
        
        private void OnReturnSoundFileIDsOperationCompleted(object arg) {
            if ((this.ReturnSoundFileIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnSoundFileIDsCompleted(this, new ReturnSoundFileIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/RemoveSoundFile", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveSoundFile(string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("RemoveSoundFile", new object[] {
                        SoundFileID,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveSoundFileAsync(string SoundFileID, string LicenseKey) {
            this.RemoveSoundFileAsync(SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void RemoveSoundFileAsync(string SoundFileID, string LicenseKey, object userState) {
            if ((this.RemoveSoundFileOperationCompleted == null)) {
                this.RemoveSoundFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSoundFileOperationCompleted);
            }
            this.InvokeAsync("RemoveSoundFile", new object[] {
                        SoundFileID,
                        LicenseKey}, this.RemoveSoundFileOperationCompleted, userState);
        }
        
        private void OnRemoveSoundFileOperationCompleted(object arg) {
            if ((this.RemoveSoundFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSoundFileCompleted(this, new RemoveSoundFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/RenameSoundFile", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RenameSoundFile(string SoundFileID, string NewSoundFileID, string LicenseKey) {
            object[] results = this.Invoke("RenameSoundFile", new object[] {
                        SoundFileID,
                        NewSoundFileID,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RenameSoundFileAsync(string SoundFileID, string NewSoundFileID, string LicenseKey) {
            this.RenameSoundFileAsync(SoundFileID, NewSoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void RenameSoundFileAsync(string SoundFileID, string NewSoundFileID, string LicenseKey, object userState) {
            if ((this.RenameSoundFileOperationCompleted == null)) {
                this.RenameSoundFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameSoundFileOperationCompleted);
            }
            this.InvokeAsync("RenameSoundFile", new object[] {
                        SoundFileID,
                        NewSoundFileID,
                        LicenseKey}, this.RenameSoundFileOperationCompleted, userState);
        }
        
        private void OnRenameSoundFileOperationCompleted(object arg) {
            if ((this.RenameSoundFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameSoundFileCompleted(this, new RenameSoundFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/UploadSoundFile", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadFileResponse UploadSoundFile([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] FileBinary, string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("UploadSoundFile", new object[] {
                        FileBinary,
                        SoundFileID,
                        LicenseKey});
            return ((UploadFileResponse)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSoundFileAsync(byte[] FileBinary, string SoundFileID, string LicenseKey) {
            this.UploadSoundFileAsync(FileBinary, SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void UploadSoundFileAsync(byte[] FileBinary, string SoundFileID, string LicenseKey, object userState) {
            if ((this.UploadSoundFileOperationCompleted == null)) {
                this.UploadSoundFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSoundFileOperationCompleted);
            }
            this.InvokeAsync("UploadSoundFile", new object[] {
                        FileBinary,
                        SoundFileID,
                        LicenseKey}, this.UploadSoundFileOperationCompleted, userState);
        }
        
        private void OnUploadSoundFileOperationCompleted(object arg) {
            if ((this.UploadSoundFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSoundFileCompleted(this, new UploadSoundFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetSoundFileLength", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double GetSoundFileLength(string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("GetSoundFileLength", new object[] {
                        SoundFileID,
                        LicenseKey});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetSoundFileLengthAsync(string SoundFileID, string LicenseKey) {
            this.GetSoundFileLengthAsync(SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetSoundFileLengthAsync(string SoundFileID, string LicenseKey, object userState) {
            if ((this.GetSoundFileLengthOperationCompleted == null)) {
                this.GetSoundFileLengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSoundFileLengthOperationCompleted);
            }
            this.InvokeAsync("GetSoundFileLength", new object[] {
                        SoundFileID,
                        LicenseKey}, this.GetSoundFileLengthOperationCompleted, userState);
        }
        
        private void OnGetSoundFileLengthOperationCompleted(object arg) {
            if ((this.GetSoundFileLengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSoundFileLengthCompleted(this, new GetSoundFileLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetSoundFile", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSoundFile(string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("GetSoundFile", new object[] {
                        SoundFileID,
                        LicenseKey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSoundFileAsync(string SoundFileID, string LicenseKey) {
            this.GetSoundFileAsync(SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetSoundFileAsync(string SoundFileID, string LicenseKey, object userState) {
            if ((this.GetSoundFileOperationCompleted == null)) {
                this.GetSoundFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSoundFileOperationCompleted);
            }
            this.InvokeAsync("GetSoundFile", new object[] {
                        SoundFileID,
                        LicenseKey}, this.GetSoundFileOperationCompleted, userState);
        }
        
        private void OnGetSoundFileOperationCompleted(object arg) {
            if ((this.GetSoundFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSoundFileCompleted(this, new GetSoundFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetTTSInULAW", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetTTSInULAW(string TextToSay, int VoiceID, byte TTSrate, byte TTSvolume, string LicenseKey) {
            object[] results = this.Invoke("GetTTSInULAW", new object[] {
                        TextToSay,
                        VoiceID,
                        TTSrate,
                        TTSvolume,
                        LicenseKey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTTSInULAWAsync(string TextToSay, int VoiceID, byte TTSrate, byte TTSvolume, string LicenseKey) {
            this.GetTTSInULAWAsync(TextToSay, VoiceID, TTSrate, TTSvolume, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetTTSInULAWAsync(string TextToSay, int VoiceID, byte TTSrate, byte TTSvolume, string LicenseKey, object userState) {
            if ((this.GetTTSInULAWOperationCompleted == null)) {
                this.GetTTSInULAWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTTSInULAWOperationCompleted);
            }
            this.InvokeAsync("GetTTSInULAW", new object[] {
                        TextToSay,
                        VoiceID,
                        TTSrate,
                        TTSvolume,
                        LicenseKey}, this.GetTTSInULAWOperationCompleted, userState);
        }
        
        private void OnGetTTSInULAWOperationCompleted(object arg) {
            if ((this.GetTTSInULAWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTTSInULAWCompleted(this, new GetTTSInULAWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetTTSInMP3", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetTTSInMP3(string TextToSay, int VoiceID, int BitRate, byte TTSrate, byte TTSvolume, string LicenseKey) {
            object[] results = this.Invoke("GetTTSInMP3", new object[] {
                        TextToSay,
                        VoiceID,
                        BitRate,
                        TTSrate,
                        TTSvolume,
                        LicenseKey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTTSInMP3Async(string TextToSay, int VoiceID, int BitRate, byte TTSrate, byte TTSvolume, string LicenseKey) {
            this.GetTTSInMP3Async(TextToSay, VoiceID, BitRate, TTSrate, TTSvolume, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetTTSInMP3Async(string TextToSay, int VoiceID, int BitRate, byte TTSrate, byte TTSvolume, string LicenseKey, object userState) {
            if ((this.GetTTSInMP3OperationCompleted == null)) {
                this.GetTTSInMP3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTTSInMP3OperationCompleted);
            }
            this.InvokeAsync("GetTTSInMP3", new object[] {
                        TextToSay,
                        VoiceID,
                        BitRate,
                        TTSrate,
                        TTSvolume,
                        LicenseKey}, this.GetTTSInMP3OperationCompleted, userState);
        }
        
        private void OnGetTTSInMP3OperationCompleted(object arg) {
            if ((this.GetTTSInMP3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTTSInMP3Completed(this, new GetTTSInMP3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetSoundFileInMP3", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSoundFileInMP3(string SoundFileID, int BitRate, string LicenseKey) {
            object[] results = this.Invoke("GetSoundFileInMP3", new object[] {
                        SoundFileID,
                        BitRate,
                        LicenseKey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSoundFileInMP3Async(string SoundFileID, int BitRate, string LicenseKey) {
            this.GetSoundFileInMP3Async(SoundFileID, BitRate, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetSoundFileInMP3Async(string SoundFileID, int BitRate, string LicenseKey, object userState) {
            if ((this.GetSoundFileInMP3OperationCompleted == null)) {
                this.GetSoundFileInMP3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSoundFileInMP3OperationCompleted);
            }
            this.InvokeAsync("GetSoundFileInMP3", new object[] {
                        SoundFileID,
                        BitRate,
                        LicenseKey}, this.GetSoundFileInMP3OperationCompleted, userState);
        }
        
        private void OnGetSoundFileInMP3OperationCompleted(object arg) {
            if ((this.GetSoundFileInMP3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSoundFileInMP3Completed(this, new GetSoundFileInMP3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetSoundFileURL", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSoundFileURL(string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("GetSoundFileURL", new object[] {
                        SoundFileID,
                        LicenseKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSoundFileURLAsync(string SoundFileID, string LicenseKey) {
            this.GetSoundFileURLAsync(SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetSoundFileURLAsync(string SoundFileID, string LicenseKey, object userState) {
            if ((this.GetSoundFileURLOperationCompleted == null)) {
                this.GetSoundFileURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSoundFileURLOperationCompleted);
            }
            this.InvokeAsync("GetSoundFileURL", new object[] {
                        SoundFileID,
                        LicenseKey}, this.GetSoundFileURLOperationCompleted, userState);
        }
        
        private void OnGetSoundFileURLOperationCompleted(object arg) {
            if ((this.GetSoundFileURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSoundFileURLCompleted(this, new GetSoundFileURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetSoundFileInUlaw", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSoundFileInUlaw(string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("GetSoundFileInUlaw", new object[] {
                        SoundFileID,
                        LicenseKey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSoundFileInUlawAsync(string SoundFileID, string LicenseKey) {
            this.GetSoundFileInUlawAsync(SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetSoundFileInUlawAsync(string SoundFileID, string LicenseKey, object userState) {
            if ((this.GetSoundFileInUlawOperationCompleted == null)) {
                this.GetSoundFileInUlawOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSoundFileInUlawOperationCompleted);
            }
            this.InvokeAsync("GetSoundFileInUlaw", new object[] {
                        SoundFileID,
                        LicenseKey}, this.GetSoundFileInUlawOperationCompleted, userState);
        }
        
        private void OnGetSoundFileInUlawOperationCompleted(object arg) {
            if ((this.GetSoundFileInUlawCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSoundFileInUlawCompleted(this, new GetSoundFileInUlawCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/RecordSoundViaPhoneCall", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RecordSoundViaPhoneCall(string PhoneNumberToDial, string SoundFileID, string LicenseKey) {
            object[] results = this.Invoke("RecordSoundViaPhoneCall", new object[] {
                        PhoneNumberToDial,
                        SoundFileID,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RecordSoundViaPhoneCallAsync(string PhoneNumberToDial, string SoundFileID, string LicenseKey) {
            this.RecordSoundViaPhoneCallAsync(PhoneNumberToDial, SoundFileID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void RecordSoundViaPhoneCallAsync(string PhoneNumberToDial, string SoundFileID, string LicenseKey, object userState) {
            if ((this.RecordSoundViaPhoneCallOperationCompleted == null)) {
                this.RecordSoundViaPhoneCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordSoundViaPhoneCallOperationCompleted);
            }
            this.InvokeAsync("RecordSoundViaPhoneCall", new object[] {
                        PhoneNumberToDial,
                        SoundFileID,
                        LicenseKey}, this.RecordSoundViaPhoneCallOperationCompleted, userState);
        }
        
        private void OnRecordSoundViaPhoneCallOperationCompleted(object arg) {
            if ((this.RecordSoundViaPhoneCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordSoundViaPhoneCallCompleted(this, new RecordSoundViaPhoneCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetQueueIDStatus", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn GetQueueIDStatus(long QueueID) {
            object[] results = this.Invoke("GetQueueIDStatus", new object[] {
                        QueueID});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueueIDStatusAsync(long QueueID) {
            this.GetQueueIDStatusAsync(QueueID, null);
        }
        
        /// <remarks/>
        public void GetQueueIDStatusAsync(long QueueID, object userState) {
            if ((this.GetQueueIDStatusOperationCompleted == null)) {
                this.GetQueueIDStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueueIDStatusOperationCompleted);
            }
            this.InvokeAsync("GetQueueIDStatus", new object[] {
                        QueueID}, this.GetQueueIDStatusOperationCompleted, userState);
        }
        
        private void OnGetQueueIDStatusOperationCompleted(object arg) {
            if ((this.GetQueueIDStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueueIDStatusCompleted(this, new GetQueueIDStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetQueueIDStatusesByPhoneNumber", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn[] GetQueueIDStatusesByPhoneNumber(string PhoneNumber, string LicenseKey) {
            object[] results = this.Invoke("GetQueueIDStatusesByPhoneNumber", new object[] {
                        PhoneNumber,
                        LicenseKey});
            return ((NotifyReturn[])(results[0]));
        }
        
        /// <remarks/>
        public void GetQueueIDStatusesByPhoneNumberAsync(string PhoneNumber, string LicenseKey) {
            this.GetQueueIDStatusesByPhoneNumberAsync(PhoneNumber, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetQueueIDStatusesByPhoneNumberAsync(string PhoneNumber, string LicenseKey, object userState) {
            if ((this.GetQueueIDStatusesByPhoneNumberOperationCompleted == null)) {
                this.GetQueueIDStatusesByPhoneNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueueIDStatusesByPhoneNumberOperationCompleted);
            }
            this.InvokeAsync("GetQueueIDStatusesByPhoneNumber", new object[] {
                        PhoneNumber,
                        LicenseKey}, this.GetQueueIDStatusesByPhoneNumberOperationCompleted, userState);
        }
        
        private void OnGetQueueIDStatusesByPhoneNumberOperationCompleted(object arg) {
            if ((this.GetQueueIDStatusesByPhoneNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueueIDStatusesByPhoneNumberCompleted(this, new GetQueueIDStatusesByPhoneNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetQueueIDStatusWithAdvancedInfo", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn GetQueueIDStatusWithAdvancedInfo(long QueueID, string LicenseKey) {
            object[] results = this.Invoke("GetQueueIDStatusWithAdvancedInfo", new object[] {
                        QueueID,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueueIDStatusWithAdvancedInfoAsync(long QueueID, string LicenseKey) {
            this.GetQueueIDStatusWithAdvancedInfoAsync(QueueID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetQueueIDStatusWithAdvancedInfoAsync(long QueueID, string LicenseKey, object userState) {
            if ((this.GetQueueIDStatusWithAdvancedInfoOperationCompleted == null)) {
                this.GetQueueIDStatusWithAdvancedInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueueIDStatusWithAdvancedInfoOperationCompleted);
            }
            this.InvokeAsync("GetQueueIDStatusWithAdvancedInfo", new object[] {
                        QueueID,
                        LicenseKey}, this.GetQueueIDStatusWithAdvancedInfoOperationCompleted, userState);
        }
        
        private void OnGetQueueIDStatusWithAdvancedInfoOperationCompleted(object arg) {
            if ((this.GetQueueIDStatusWithAdvancedInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueueIDStatusWithAdvancedInfoCompleted(this, new GetQueueIDStatusWithAdvancedInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneEnglishBasic", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneEnglishBasic(string PhoneNumberToDial, string TextToSay, string LicenseKey) {
            object[] results = this.Invoke("NotifyPhoneEnglishBasic", new object[] {
                        PhoneNumberToDial,
                        TextToSay,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneEnglishBasicAsync(string PhoneNumberToDial, string TextToSay, string LicenseKey) {
            this.NotifyPhoneEnglishBasicAsync(PhoneNumberToDial, TextToSay, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneEnglishBasicAsync(string PhoneNumberToDial, string TextToSay, string LicenseKey, object userState) {
            if ((this.NotifyPhoneEnglishBasicOperationCompleted == null)) {
                this.NotifyPhoneEnglishBasicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneEnglishBasicOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneEnglishBasic", new object[] {
                        PhoneNumberToDial,
                        TextToSay,
                        LicenseKey}, this.NotifyPhoneEnglishBasicOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneEnglishBasicOperationCompleted(object arg) {
            if ((this.NotifyPhoneEnglishBasicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneEnglishBasicCompleted(this, new NotifyPhoneEnglishBasicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneBasicWithTransfer", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneBasicWithTransfer(string PhoneNumberToDial, string TransferNumber, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyPhoneBasicWithTransfer", new object[] {
                        PhoneNumberToDial,
                        TransferNumber,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicWithTransferAsync(string PhoneNumberToDial, string TransferNumber, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            this.NotifyPhoneBasicWithTransferAsync(PhoneNumberToDial, TransferNumber, TextToSay, CallerID, CallerIDname, VoiceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicWithTransferAsync(string PhoneNumberToDial, string TransferNumber, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey, object userState) {
            if ((this.NotifyPhoneBasicWithTransferOperationCompleted == null)) {
                this.NotifyPhoneBasicWithTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneBasicWithTransferOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneBasicWithTransfer", new object[] {
                        PhoneNumberToDial,
                        TransferNumber,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey}, this.NotifyPhoneBasicWithTransferOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneBasicWithTransferOperationCompleted(object arg) {
            if ((this.NotifyPhoneBasicWithTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneBasicWithTransferCompleted(this, new NotifyPhoneBasicWithTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetMultipleQueueIdStatus", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn[] GetMultipleQueueIdStatus(string QueueIDs, string LicenseKey) {
            object[] results = this.Invoke("GetMultipleQueueIdStatus", new object[] {
                        QueueIDs,
                        LicenseKey});
            return ((NotifyReturn[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleQueueIdStatusAsync(string QueueIDs, string LicenseKey) {
            this.GetMultipleQueueIdStatusAsync(QueueIDs, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetMultipleQueueIdStatusAsync(string QueueIDs, string LicenseKey, object userState) {
            if ((this.GetMultipleQueueIdStatusOperationCompleted == null)) {
                this.GetMultipleQueueIdStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleQueueIdStatusOperationCompleted);
            }
            this.InvokeAsync("GetMultipleQueueIdStatus", new object[] {
                        QueueIDs,
                        LicenseKey}, this.GetMultipleQueueIdStatusOperationCompleted, userState);
        }
        
        private void OnGetMultipleQueueIdStatusOperationCompleted(object arg) {
            if ((this.GetMultipleQueueIdStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleQueueIdStatusCompleted(this, new GetMultipleQueueIdStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneBasic", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneBasic(string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyPhoneBasic", new object[] {
                        PhoneNumberToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicAsync(string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            this.NotifyPhoneBasicAsync(PhoneNumberToDial, TextToSay, CallerID, CallerIDname, VoiceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicAsync(string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey, object userState) {
            if ((this.NotifyPhoneBasicOperationCompleted == null)) {
                this.NotifyPhoneBasicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneBasicOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneBasic", new object[] {
                        PhoneNumberToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey}, this.NotifyPhoneBasicOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneBasicOperationCompleted(object arg) {
            if ((this.NotifyPhoneBasicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneBasicCompleted(this, new NotifyPhoneBasicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneBasicWithTryCount", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneBasicWithTryCount(short TryCount, string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyPhoneBasicWithTryCount", new object[] {
                        TryCount,
                        PhoneNumberToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicWithTryCountAsync(short TryCount, string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            this.NotifyPhoneBasicWithTryCountAsync(TryCount, PhoneNumberToDial, TextToSay, CallerID, CallerIDname, VoiceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneBasicWithTryCountAsync(short TryCount, string PhoneNumberToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey, object userState) {
            if ((this.NotifyPhoneBasicWithTryCountOperationCompleted == null)) {
                this.NotifyPhoneBasicWithTryCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneBasicWithTryCountOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneBasicWithTryCount", new object[] {
                        TryCount,
                        PhoneNumberToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey}, this.NotifyPhoneBasicWithTryCountOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneBasicWithTryCountOperationCompleted(object arg) {
            if ((this.NotifyPhoneBasicWithTryCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneBasicWithTryCountCompleted(this, new NotifyPhoneBasicWithTryCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyPhoneAdvanced", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn NotifyPhoneAdvanced(AdvancedNotifyRequest anr) {
            object[] results = this.Invoke("NotifyPhoneAdvanced", new object[] {
                        anr});
            return ((NotifyReturn)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyPhoneAdvancedAsync(AdvancedNotifyRequest anr) {
            this.NotifyPhoneAdvancedAsync(anr, null);
        }
        
        /// <remarks/>
        public void NotifyPhoneAdvancedAsync(AdvancedNotifyRequest anr, object userState) {
            if ((this.NotifyPhoneAdvancedOperationCompleted == null)) {
                this.NotifyPhoneAdvancedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyPhoneAdvancedOperationCompleted);
            }
            this.InvokeAsync("NotifyPhoneAdvanced", new object[] {
                        anr}, this.NotifyPhoneAdvancedOperationCompleted, userState);
        }
        
        private void OnNotifyPhoneAdvancedOperationCompleted(object arg) {
            if ((this.NotifyPhoneAdvancedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyPhoneAdvancedCompleted(this, new NotifyPhoneAdvancedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyMultiplePhoneBasic", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn[] NotifyMultiplePhoneBasic(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyMultiplePhoneBasic", new object[] {
                        PhoneNumbersToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey});
            return ((NotifyReturn[])(results[0]));
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneBasicAsync(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey) {
            this.NotifyMultiplePhoneBasicAsync(PhoneNumbersToDial, TextToSay, CallerID, CallerIDname, VoiceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneBasicAsync(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, string LicenseKey, object userState) {
            if ((this.NotifyMultiplePhoneBasicOperationCompleted == null)) {
                this.NotifyMultiplePhoneBasicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyMultiplePhoneBasicOperationCompleted);
            }
            this.InvokeAsync("NotifyMultiplePhoneBasic", new object[] {
                        PhoneNumbersToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        LicenseKey}, this.NotifyMultiplePhoneBasicOperationCompleted, userState);
        }
        
        private void OnNotifyMultiplePhoneBasicOperationCompleted(object arg) {
            if ((this.NotifyMultiplePhoneBasicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyMultiplePhoneBasicCompleted(this, new NotifyMultiplePhoneBasicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyMultiplePhoneBasicWithCPM", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn[] NotifyMultiplePhoneBasicWithCPM(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, int CallsPerMinute, string LicenseKey) {
            object[] results = this.Invoke("NotifyMultiplePhoneBasicWithCPM", new object[] {
                        PhoneNumbersToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        CallsPerMinute,
                        LicenseKey});
            return ((NotifyReturn[])(results[0]));
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneBasicWithCPMAsync(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, int CallsPerMinute, string LicenseKey) {
            this.NotifyMultiplePhoneBasicWithCPMAsync(PhoneNumbersToDial, TextToSay, CallerID, CallerIDname, VoiceID, CallsPerMinute, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneBasicWithCPMAsync(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, int CallsPerMinute, string LicenseKey, object userState) {
            if ((this.NotifyMultiplePhoneBasicWithCPMOperationCompleted == null)) {
                this.NotifyMultiplePhoneBasicWithCPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyMultiplePhoneBasicWithCPMOperationCompleted);
            }
            this.InvokeAsync("NotifyMultiplePhoneBasicWithCPM", new object[] {
                        PhoneNumbersToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        CallsPerMinute,
                        LicenseKey}, this.NotifyMultiplePhoneBasicWithCPMOperationCompleted, userState);
        }
        
        private void OnNotifyMultiplePhoneBasicWithCPMOperationCompleted(object arg) {
            if ((this.NotifyMultiplePhoneBasicWithCPMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyMultiplePhoneBasicWithCPMCompleted(this, new NotifyMultiplePhoneBasicWithCPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyMultiplePhoneBasicWithCPMandReferenceID", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn[] NotifyMultiplePhoneBasicWithCPMandReferenceID(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, int CallsPerMinute, string ReferenceID, string LicenseKey) {
            object[] results = this.Invoke("NotifyMultiplePhoneBasicWithCPMandReferenceID", new object[] {
                        PhoneNumbersToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        CallsPerMinute,
                        ReferenceID,
                        LicenseKey});
            return ((NotifyReturn[])(results[0]));
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneBasicWithCPMandReferenceIDAsync(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, int CallsPerMinute, string ReferenceID, string LicenseKey) {
            this.NotifyMultiplePhoneBasicWithCPMandReferenceIDAsync(PhoneNumbersToDial, TextToSay, CallerID, CallerIDname, VoiceID, CallsPerMinute, ReferenceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneBasicWithCPMandReferenceIDAsync(string PhoneNumbersToDial, string TextToSay, string CallerID, string CallerIDname, string VoiceID, int CallsPerMinute, string ReferenceID, string LicenseKey, object userState) {
            if ((this.NotifyMultiplePhoneBasicWithCPMandReferenceIDOperationCompleted == null)) {
                this.NotifyMultiplePhoneBasicWithCPMandReferenceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyMultiplePhoneBasicWithCPMandReferenceIDOperationCompleted);
            }
            this.InvokeAsync("NotifyMultiplePhoneBasicWithCPMandReferenceID", new object[] {
                        PhoneNumbersToDial,
                        TextToSay,
                        CallerID,
                        CallerIDname,
                        VoiceID,
                        CallsPerMinute,
                        ReferenceID,
                        LicenseKey}, this.NotifyMultiplePhoneBasicWithCPMandReferenceIDOperationCompleted, userState);
        }
        
        private void OnNotifyMultiplePhoneBasicWithCPMandReferenceIDOperationCompleted(object arg) {
            if ((this.NotifyMultiplePhoneBasicWithCPMandReferenceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyMultiplePhoneBasicWithCPMandReferenceIDCompleted(this, new NotifyMultiplePhoneBasicWithCPMandReferenceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/NotifyMultiplePhoneAdvanced", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NotifyReturn[] NotifyMultiplePhoneAdvanced(AdvancedNotifyRequest[] MultipleANR) {
            object[] results = this.Invoke("NotifyMultiplePhoneAdvanced", new object[] {
                        MultipleANR});
            return ((NotifyReturn[])(results[0]));
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneAdvancedAsync(AdvancedNotifyRequest[] MultipleANR) {
            this.NotifyMultiplePhoneAdvancedAsync(MultipleANR, null);
        }
        
        /// <remarks/>
        public void NotifyMultiplePhoneAdvancedAsync(AdvancedNotifyRequest[] MultipleANR, object userState) {
            if ((this.NotifyMultiplePhoneAdvancedOperationCompleted == null)) {
                this.NotifyMultiplePhoneAdvancedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyMultiplePhoneAdvancedOperationCompleted);
            }
            this.InvokeAsync("NotifyMultiplePhoneAdvanced", new object[] {
                        MultipleANR}, this.NotifyMultiplePhoneAdvancedOperationCompleted, userState);
        }
        
        private void OnNotifyMultiplePhoneAdvancedOperationCompleted(object arg) {
            if ((this.NotifyMultiplePhoneAdvancedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyMultiplePhoneAdvancedCompleted(this, new NotifyMultiplePhoneAdvancedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/CancelConference", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelConference(string ConferenceKey) {
            this.Invoke("CancelConference", new object[] {
                        ConferenceKey});
        }
        
        /// <remarks/>
        public void CancelConferenceAsync(string ConferenceKey) {
            this.CancelConferenceAsync(ConferenceKey, null);
        }
        
        /// <remarks/>
        public void CancelConferenceAsync(string ConferenceKey, object userState) {
            if ((this.CancelConferenceOperationCompleted == null)) {
                this.CancelConferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelConferenceOperationCompleted);
            }
            this.InvokeAsync("CancelConference", new object[] {
                        ConferenceKey}, this.CancelConferenceOperationCompleted, userState);
        }
        
        private void OnCancelConferenceOperationCompleted(object arg) {
            if ((this.CancelConferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelConferenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/CancelNotify", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CancelNotify(long QueueID, string LicenseKey) {
            object[] results = this.Invoke("CancelNotify", new object[] {
                        QueueID,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelNotifyAsync(long QueueID, string LicenseKey) {
            this.CancelNotifyAsync(QueueID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void CancelNotifyAsync(long QueueID, string LicenseKey, object userState) {
            if ((this.CancelNotifyOperationCompleted == null)) {
                this.CancelNotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelNotifyOperationCompleted);
            }
            this.InvokeAsync("CancelNotify", new object[] {
                        QueueID,
                        LicenseKey}, this.CancelNotifyOperationCompleted, userState);
        }
        
        private void OnCancelNotifyOperationCompleted(object arg) {
            if ((this.CancelNotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelNotifyCompleted(this, new CancelNotifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/CancelNotifyByReferenceID", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CancelNotifyByReferenceID(string ReferenceID, string LicenseKey) {
            object[] results = this.Invoke("CancelNotifyByReferenceID", new object[] {
                        ReferenceID,
                        LicenseKey});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CancelNotifyByReferenceIDAsync(string ReferenceID, string LicenseKey) {
            this.CancelNotifyByReferenceIDAsync(ReferenceID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void CancelNotifyByReferenceIDAsync(string ReferenceID, string LicenseKey, object userState) {
            if ((this.CancelNotifyByReferenceIDOperationCompleted == null)) {
                this.CancelNotifyByReferenceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelNotifyByReferenceIDOperationCompleted);
            }
            this.InvokeAsync("CancelNotifyByReferenceID", new object[] {
                        ReferenceID,
                        LicenseKey}, this.CancelNotifyByReferenceIDOperationCompleted, userState);
        }
        
        private void OnCancelNotifyByReferenceIDOperationCompleted(object arg) {
            if ((this.CancelNotifyByReferenceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelNotifyByReferenceIDCompleted(this, new CancelNotifyByReferenceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/ScriptList", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] ScriptList(bool IncludeGlobalScripts, string LicenseKey) {
            object[] results = this.Invoke("ScriptList", new object[] {
                        IncludeGlobalScripts,
                        LicenseKey});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ScriptListAsync(bool IncludeGlobalScripts, string LicenseKey) {
            this.ScriptListAsync(IncludeGlobalScripts, LicenseKey, null);
        }
        
        /// <remarks/>
        public void ScriptListAsync(bool IncludeGlobalScripts, string LicenseKey, object userState) {
            if ((this.ScriptListOperationCompleted == null)) {
                this.ScriptListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScriptListOperationCompleted);
            }
            this.InvokeAsync("ScriptList", new object[] {
                        IncludeGlobalScripts,
                        LicenseKey}, this.ScriptListOperationCompleted, userState);
        }
        
        private void OnScriptListOperationCompleted(object arg) {
            if ((this.ScriptListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScriptListCompleted(this, new ScriptListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/ScriptSave", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ScriptSave(string ScriptName, string ScriptText, string LicenseKey) {
            object[] results = this.Invoke("ScriptSave", new object[] {
                        ScriptName,
                        ScriptText,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ScriptSaveAsync(string ScriptName, string ScriptText, string LicenseKey) {
            this.ScriptSaveAsync(ScriptName, ScriptText, LicenseKey, null);
        }
        
        /// <remarks/>
        public void ScriptSaveAsync(string ScriptName, string ScriptText, string LicenseKey, object userState) {
            if ((this.ScriptSaveOperationCompleted == null)) {
                this.ScriptSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScriptSaveOperationCompleted);
            }
            this.InvokeAsync("ScriptSave", new object[] {
                        ScriptName,
                        ScriptText,
                        LicenseKey}, this.ScriptSaveOperationCompleted, userState);
        }
        
        private void OnScriptSaveOperationCompleted(object arg) {
            if ((this.ScriptSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScriptSaveCompleted(this, new ScriptSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/ScriptDelete", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ScriptDelete(string ScriptName, string LicenseKey) {
            object[] results = this.Invoke("ScriptDelete", new object[] {
                        ScriptName,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ScriptDeleteAsync(string ScriptName, string LicenseKey) {
            this.ScriptDeleteAsync(ScriptName, LicenseKey, null);
        }
        
        /// <remarks/>
        public void ScriptDeleteAsync(string ScriptName, string LicenseKey, object userState) {
            if ((this.ScriptDeleteOperationCompleted == null)) {
                this.ScriptDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScriptDeleteOperationCompleted);
            }
            this.InvokeAsync("ScriptDelete", new object[] {
                        ScriptName,
                        LicenseKey}, this.ScriptDeleteOperationCompleted, userState);
        }
        
        private void OnScriptDeleteOperationCompleted(object arg) {
            if ((this.ScriptDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScriptDeleteCompleted(this, new ScriptDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/ScriptLoad", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ScriptLoad(string ScriptName, string LicenseKey) {
            object[] results = this.Invoke("ScriptLoad", new object[] {
                        ScriptName,
                        LicenseKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ScriptLoadAsync(string ScriptName, string LicenseKey) {
            this.ScriptLoadAsync(ScriptName, LicenseKey, null);
        }
        
        /// <remarks/>
        public void ScriptLoadAsync(string ScriptName, string LicenseKey, object userState) {
            if ((this.ScriptLoadOperationCompleted == null)) {
                this.ScriptLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScriptLoadOperationCompleted);
            }
            this.InvokeAsync("ScriptLoad", new object[] {
                        ScriptName,
                        LicenseKey}, this.ScriptLoadOperationCompleted, userState);
        }
        
        private void OnScriptLoadOperationCompleted(object arg) {
            if ((this.ScriptLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScriptLoadCompleted(this, new ScriptLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LicenseKeyVariableLoad", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LicenseKeyVariableLoad(string VariableName, string LicenseKey) {
            object[] results = this.Invoke("LicenseKeyVariableLoad", new object[] {
                        VariableName,
                        LicenseKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LicenseKeyVariableLoadAsync(string VariableName, string LicenseKey) {
            this.LicenseKeyVariableLoadAsync(VariableName, LicenseKey, null);
        }
        
        /// <remarks/>
        public void LicenseKeyVariableLoadAsync(string VariableName, string LicenseKey, object userState) {
            if ((this.LicenseKeyVariableLoadOperationCompleted == null)) {
                this.LicenseKeyVariableLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLicenseKeyVariableLoadOperationCompleted);
            }
            this.InvokeAsync("LicenseKeyVariableLoad", new object[] {
                        VariableName,
                        LicenseKey}, this.LicenseKeyVariableLoadOperationCompleted, userState);
        }
        
        private void OnLicenseKeyVariableLoadOperationCompleted(object arg) {
            if ((this.LicenseKeyVariableLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LicenseKeyVariableLoadCompleted(this, new LicenseKeyVariableLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LicenseKeyVariableSave", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LicenseKeyVariableSave(string VariableName, string VariableValue, string LicenseKey) {
            object[] results = this.Invoke("LicenseKeyVariableSave", new object[] {
                        VariableName,
                        VariableValue,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LicenseKeyVariableSaveAsync(string VariableName, string VariableValue, string LicenseKey) {
            this.LicenseKeyVariableSaveAsync(VariableName, VariableValue, LicenseKey, null);
        }
        
        /// <remarks/>
        public void LicenseKeyVariableSaveAsync(string VariableName, string VariableValue, string LicenseKey, object userState) {
            if ((this.LicenseKeyVariableSaveOperationCompleted == null)) {
                this.LicenseKeyVariableSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLicenseKeyVariableSaveOperationCompleted);
            }
            this.InvokeAsync("LicenseKeyVariableSave", new object[] {
                        VariableName,
                        VariableValue,
                        LicenseKey}, this.LicenseKeyVariableSaveOperationCompleted, userState);
        }
        
        private void OnLicenseKeyVariableSaveOperationCompleted(object arg) {
            if ((this.LicenseKeyVariableSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LicenseKeyVariableSaveCompleted(this, new LicenseKeyVariableSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_GetListIDsByLicensekey", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LM_ListIDs[] LM_GetListIDsByLicensekey(string licensekey) {
            object[] results = this.Invoke("LM_GetListIDsByLicensekey", new object[] {
                        licensekey});
            return ((LM_ListIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void LM_GetListIDsByLicensekeyAsync(string licensekey) {
            this.LM_GetListIDsByLicensekeyAsync(licensekey, null);
        }
        
        /// <remarks/>
        public void LM_GetListIDsByLicensekeyAsync(string licensekey, object userState) {
            if ((this.LM_GetListIDsByLicensekeyOperationCompleted == null)) {
                this.LM_GetListIDsByLicensekeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_GetListIDsByLicensekeyOperationCompleted);
            }
            this.InvokeAsync("LM_GetListIDsByLicensekey", new object[] {
                        licensekey}, this.LM_GetListIDsByLicensekeyOperationCompleted, userState);
        }
        
        private void OnLM_GetListIDsByLicensekeyOperationCompleted(object arg) {
            if ((this.LM_GetListIDsByLicensekeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_GetListIDsByLicensekeyCompleted(this, new LM_GetListIDsByLicensekeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_GetListMembersByListID", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LM_ListMembers[] LM_GetListMembersByListID(int ListID, string Licensekey) {
            object[] results = this.Invoke("LM_GetListMembersByListID", new object[] {
                        ListID,
                        Licensekey});
            return ((LM_ListMembers[])(results[0]));
        }
        
        /// <remarks/>
        public void LM_GetListMembersByListIDAsync(int ListID, string Licensekey) {
            this.LM_GetListMembersByListIDAsync(ListID, Licensekey, null);
        }
        
        /// <remarks/>
        public void LM_GetListMembersByListIDAsync(int ListID, string Licensekey, object userState) {
            if ((this.LM_GetListMembersByListIDOperationCompleted == null)) {
                this.LM_GetListMembersByListIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_GetListMembersByListIDOperationCompleted);
            }
            this.InvokeAsync("LM_GetListMembersByListID", new object[] {
                        ListID,
                        Licensekey}, this.LM_GetListMembersByListIDOperationCompleted, userState);
        }
        
        private void OnLM_GetListMembersByListIDOperationCompleted(object arg) {
            if ((this.LM_GetListMembersByListIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_GetListMembersByListIDCompleted(this, new LM_GetListMembersByListIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_DialList", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LM_DialReturn LM_DialList(int ListID, bool DialRecursiveLists, string CallerID, string CallerIDName, byte VoiceID, string TextToSay, string LicenseKey) {
            object[] results = this.Invoke("LM_DialList", new object[] {
                        ListID,
                        DialRecursiveLists,
                        CallerID,
                        CallerIDName,
                        VoiceID,
                        TextToSay,
                        LicenseKey});
            return ((LM_DialReturn)(results[0]));
        }
        
        /// <remarks/>
        public void LM_DialListAsync(int ListID, bool DialRecursiveLists, string CallerID, string CallerIDName, byte VoiceID, string TextToSay, string LicenseKey) {
            this.LM_DialListAsync(ListID, DialRecursiveLists, CallerID, CallerIDName, VoiceID, TextToSay, LicenseKey, null);
        }
        
        /// <remarks/>
        public void LM_DialListAsync(int ListID, bool DialRecursiveLists, string CallerID, string CallerIDName, byte VoiceID, string TextToSay, string LicenseKey, object userState) {
            if ((this.LM_DialListOperationCompleted == null)) {
                this.LM_DialListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_DialListOperationCompleted);
            }
            this.InvokeAsync("LM_DialList", new object[] {
                        ListID,
                        DialRecursiveLists,
                        CallerID,
                        CallerIDName,
                        VoiceID,
                        TextToSay,
                        LicenseKey}, this.LM_DialListOperationCompleted, userState);
        }
        
        private void OnLM_DialListOperationCompleted(object arg) {
            if ((this.LM_DialListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_DialListCompleted(this, new LM_DialListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_DialListAdvanced", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LM_DialReturn LM_DialListAdvanced(LM_Functions lmFunctions) {
            object[] results = this.Invoke("LM_DialListAdvanced", new object[] {
                        lmFunctions});
            return ((LM_DialReturn)(results[0]));
        }
        
        /// <remarks/>
        public void LM_DialListAdvancedAsync(LM_Functions lmFunctions) {
            this.LM_DialListAdvancedAsync(lmFunctions, null);
        }
        
        /// <remarks/>
        public void LM_DialListAdvancedAsync(LM_Functions lmFunctions, object userState) {
            if ((this.LM_DialListAdvancedOperationCompleted == null)) {
                this.LM_DialListAdvancedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_DialListAdvancedOperationCompleted);
            }
            this.InvokeAsync("LM_DialListAdvanced", new object[] {
                        lmFunctions}, this.LM_DialListAdvancedOperationCompleted, userState);
        }
        
        private void OnLM_DialListAdvancedOperationCompleted(object arg) {
            if ((this.LM_DialListAdvancedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_DialListAdvancedCompleted(this, new LM_DialListAdvancedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_AddNewList", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LM_AddNewList(string ListName, int ParentListID, string LicenseKey) {
            object[] results = this.Invoke("LM_AddNewList", new object[] {
                        ListName,
                        ParentListID,
                        LicenseKey});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LM_AddNewListAsync(string ListName, int ParentListID, string LicenseKey) {
            this.LM_AddNewListAsync(ListName, ParentListID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void LM_AddNewListAsync(string ListName, int ParentListID, string LicenseKey, object userState) {
            if ((this.LM_AddNewListOperationCompleted == null)) {
                this.LM_AddNewListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_AddNewListOperationCompleted);
            }
            this.InvokeAsync("LM_AddNewList", new object[] {
                        ListName,
                        ParentListID,
                        LicenseKey}, this.LM_AddNewListOperationCompleted, userState);
        }
        
        private void OnLM_AddNewListOperationCompleted(object arg) {
            if ((this.LM_AddNewListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_AddNewListCompleted(this, new LM_AddNewListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_AddListMember", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LM_AddListMember(int ListID, string LicenseKey, string PhoneNumber, string ClientID, string FirstName, string LastName) {
            object[] results = this.Invoke("LM_AddListMember", new object[] {
                        ListID,
                        LicenseKey,
                        PhoneNumber,
                        ClientID,
                        FirstName,
                        LastName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LM_AddListMemberAsync(int ListID, string LicenseKey, string PhoneNumber, string ClientID, string FirstName, string LastName) {
            this.LM_AddListMemberAsync(ListID, LicenseKey, PhoneNumber, ClientID, FirstName, LastName, null);
        }
        
        /// <remarks/>
        public void LM_AddListMemberAsync(int ListID, string LicenseKey, string PhoneNumber, string ClientID, string FirstName, string LastName, object userState) {
            if ((this.LM_AddListMemberOperationCompleted == null)) {
                this.LM_AddListMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_AddListMemberOperationCompleted);
            }
            this.InvokeAsync("LM_AddListMember", new object[] {
                        ListID,
                        LicenseKey,
                        PhoneNumber,
                        ClientID,
                        FirstName,
                        LastName}, this.LM_AddListMemberOperationCompleted, userState);
        }
        
        private void OnLM_AddListMemberOperationCompleted(object arg) {
            if ((this.LM_AddListMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_AddListMemberCompleted(this, new LM_AddListMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_DeleteList", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LM_DeleteList(int ListID, string LicenseKey) {
            object[] results = this.Invoke("LM_DeleteList", new object[] {
                        ListID,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LM_DeleteListAsync(int ListID, string LicenseKey) {
            this.LM_DeleteListAsync(ListID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void LM_DeleteListAsync(int ListID, string LicenseKey, object userState) {
            if ((this.LM_DeleteListOperationCompleted == null)) {
                this.LM_DeleteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_DeleteListOperationCompleted);
            }
            this.InvokeAsync("LM_DeleteList", new object[] {
                        ListID,
                        LicenseKey}, this.LM_DeleteListOperationCompleted, userState);
        }
        
        private void OnLM_DeleteListOperationCompleted(object arg) {
            if ((this.LM_DeleteListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_DeleteListCompleted(this, new LM_DeleteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_DeleteListMember", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LM_DeleteListMember(int ListMemberID, string LicenseKey) {
            object[] results = this.Invoke("LM_DeleteListMember", new object[] {
                        ListMemberID,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LM_DeleteListMemberAsync(int ListMemberID, string LicenseKey) {
            this.LM_DeleteListMemberAsync(ListMemberID, LicenseKey, null);
        }
        
        /// <remarks/>
        public void LM_DeleteListMemberAsync(int ListMemberID, string LicenseKey, object userState) {
            if ((this.LM_DeleteListMemberOperationCompleted == null)) {
                this.LM_DeleteListMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_DeleteListMemberOperationCompleted);
            }
            this.InvokeAsync("LM_DeleteListMember", new object[] {
                        ListMemberID,
                        LicenseKey}, this.LM_DeleteListMemberOperationCompleted, userState);
        }
        
        private void OnLM_DeleteListMemberOperationCompleted(object arg) {
            if ((this.LM_DeleteListMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_DeleteListMemberCompleted(this, new LM_DeleteListMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_AlterListMember", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LM_AlterListMember(int ListMemberID, string licensekey, string ClientID, string FirstName, string LastName, string PhoneNumber) {
            object[] results = this.Invoke("LM_AlterListMember", new object[] {
                        ListMemberID,
                        licensekey,
                        ClientID,
                        FirstName,
                        LastName,
                        PhoneNumber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LM_AlterListMemberAsync(int ListMemberID, string licensekey, string ClientID, string FirstName, string LastName, string PhoneNumber) {
            this.LM_AlterListMemberAsync(ListMemberID, licensekey, ClientID, FirstName, LastName, PhoneNumber, null);
        }
        
        /// <remarks/>
        public void LM_AlterListMemberAsync(int ListMemberID, string licensekey, string ClientID, string FirstName, string LastName, string PhoneNumber, object userState) {
            if ((this.LM_AlterListMemberOperationCompleted == null)) {
                this.LM_AlterListMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_AlterListMemberOperationCompleted);
            }
            this.InvokeAsync("LM_AlterListMember", new object[] {
                        ListMemberID,
                        licensekey,
                        ClientID,
                        FirstName,
                        LastName,
                        PhoneNumber}, this.LM_AlterListMemberOperationCompleted, userState);
        }
        
        private void OnLM_AlterListMemberOperationCompleted(object arg) {
            if ((this.LM_AlterListMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_AlterListMemberCompleted(this, new LM_AlterListMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/LM_AlterListID", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LM_AlterListID(int ListID, int ParentListID, string ListName, string Licensekey) {
            object[] results = this.Invoke("LM_AlterListID", new object[] {
                        ListID,
                        ParentListID,
                        ListName,
                        Licensekey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LM_AlterListIDAsync(int ListID, int ParentListID, string ListName, string Licensekey) {
            this.LM_AlterListIDAsync(ListID, ParentListID, ListName, Licensekey, null);
        }
        
        /// <remarks/>
        public void LM_AlterListIDAsync(int ListID, int ParentListID, string ListName, string Licensekey, object userState) {
            if ((this.LM_AlterListIDOperationCompleted == null)) {
                this.LM_AlterListIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLM_AlterListIDOperationCompleted);
            }
            this.InvokeAsync("LM_AlterListID", new object[] {
                        ListID,
                        ParentListID,
                        ListName,
                        Licensekey}, this.LM_AlterListIDOperationCompleted, userState);
        }
        
        private void OnLM_AlterListIDOperationCompleted(object arg) {
            if ((this.LM_AlterListIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LM_AlterListIDCompleted(this, new LM_AlterListIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetResponseCodes", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response[] GetResponseCodes() {
            object[] results = this.Invoke("GetResponseCodes", new object[0]);
            return ((Response[])(results[0]));
        }
        
        /// <remarks/>
        public void GetResponseCodesAsync() {
            this.GetResponseCodesAsync(null);
        }
        
        /// <remarks/>
        public void GetResponseCodesAsync(object userState) {
            if ((this.GetResponseCodesOperationCompleted == null)) {
                this.GetResponseCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResponseCodesOperationCompleted);
            }
            this.InvokeAsync("GetResponseCodes", new object[0], this.GetResponseCodesOperationCompleted, userState);
        }
        
        private void OnGetResponseCodesOperationCompleted(object arg) {
            if ((this.GetResponseCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResponseCodesCompleted(this, new GetResponseCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetAvailableAreaCodes", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AreaCode[] GetAvailableAreaCodes() {
            object[] results = this.Invoke("GetAvailableAreaCodes", new object[0]);
            return ((AreaCode[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableAreaCodesAsync() {
            this.GetAvailableAreaCodesAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableAreaCodesAsync(object userState) {
            if ((this.GetAvailableAreaCodesOperationCompleted == null)) {
                this.GetAvailableAreaCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableAreaCodesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableAreaCodes", new object[0], this.GetAvailableAreaCodesOperationCompleted, userState);
        }
        
        private void OnGetAvailableAreaCodesOperationCompleted(object arg) {
            if ((this.GetAvailableAreaCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableAreaCodesCompleted(this, new GetAvailableAreaCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetAvailableIncomingNumbers", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAvailableIncomingNumbers(string AreaCodeFilter) {
            object[] results = this.Invoke("GetAvailableIncomingNumbers", new object[] {
                        AreaCodeFilter});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableIncomingNumbersAsync(string AreaCodeFilter) {
            this.GetAvailableIncomingNumbersAsync(AreaCodeFilter, null);
        }
        
        /// <remarks/>
        public void GetAvailableIncomingNumbersAsync(string AreaCodeFilter, object userState) {
            if ((this.GetAvailableIncomingNumbersOperationCompleted == null)) {
                this.GetAvailableIncomingNumbersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableIncomingNumbersOperationCompleted);
            }
            this.InvokeAsync("GetAvailableIncomingNumbers", new object[] {
                        AreaCodeFilter}, this.GetAvailableIncomingNumbersOperationCompleted, userState);
        }
        
        private void OnGetAvailableIncomingNumbersOperationCompleted(object arg) {
            if ((this.GetAvailableIncomingNumbersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableIncomingNumbersCompleted(this, new GetAvailableIncomingNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetAssignedNumbers", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAssignedNumbers(string LicenseKey) {
            object[] results = this.Invoke("GetAssignedNumbers", new object[] {
                        LicenseKey});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAssignedNumbersAsync(string LicenseKey) {
            this.GetAssignedNumbersAsync(LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetAssignedNumbersAsync(string LicenseKey, object userState) {
            if ((this.GetAssignedNumbersOperationCompleted == null)) {
                this.GetAssignedNumbersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssignedNumbersOperationCompleted);
            }
            this.InvokeAsync("GetAssignedNumbers", new object[] {
                        LicenseKey}, this.GetAssignedNumbersOperationCompleted, userState);
        }
        
        private void OnGetAssignedNumbersOperationCompleted(object arg) {
            if ((this.GetAssignedNumbersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssignedNumbersCompleted(this, new GetAssignedNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/getVoices", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Voice[] getVoices() {
            object[] results = this.Invoke("getVoices", new object[0]);
            return ((Voice[])(results[0]));
        }
        
        /// <remarks/>
        public void getVoicesAsync() {
            this.getVoicesAsync(null);
        }
        
        /// <remarks/>
        public void getVoicesAsync(object userState) {
            if ((this.getVoicesOperationCompleted == null)) {
                this.getVoicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVoicesOperationCompleted);
            }
            this.InvokeAsync("getVoices", new object[0], this.getVoicesOperationCompleted, userState);
        }
        
        private void OngetVoicesOperationCompleted(object arg) {
            if ((this.getVoicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVoicesCompleted(this, new getVoicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/AssignIncomingNumber", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AssignIncomingNumber(string IncomingPhoneNumber, string LicenseKey) {
            object[] results = this.Invoke("AssignIncomingNumber", new object[] {
                        IncomingPhoneNumber,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AssignIncomingNumberAsync(string IncomingPhoneNumber, string LicenseKey) {
            this.AssignIncomingNumberAsync(IncomingPhoneNumber, LicenseKey, null);
        }
        
        /// <remarks/>
        public void AssignIncomingNumberAsync(string IncomingPhoneNumber, string LicenseKey, object userState) {
            if ((this.AssignIncomingNumberOperationCompleted == null)) {
                this.AssignIncomingNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignIncomingNumberOperationCompleted);
            }
            this.InvokeAsync("AssignIncomingNumber", new object[] {
                        IncomingPhoneNumber,
                        LicenseKey}, this.AssignIncomingNumberOperationCompleted, userState);
        }
        
        private void OnAssignIncomingNumberOperationCompleted(object arg) {
            if ((this.AssignIncomingNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignIncomingNumberCompleted(this, new AssignIncomingNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/SetIncomingCallScript", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetIncomingCallScript(string PhoneNumber, string Script, string LicenseKey) {
            object[] results = this.Invoke("SetIncomingCallScript", new object[] {
                        PhoneNumber,
                        Script,
                        LicenseKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetIncomingCallScriptAsync(string PhoneNumber, string Script, string LicenseKey) {
            this.SetIncomingCallScriptAsync(PhoneNumber, Script, LicenseKey, null);
        }
        
        /// <remarks/>
        public void SetIncomingCallScriptAsync(string PhoneNumber, string Script, string LicenseKey, object userState) {
            if ((this.SetIncomingCallScriptOperationCompleted == null)) {
                this.SetIncomingCallScriptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIncomingCallScriptOperationCompleted);
            }
            this.InvokeAsync("SetIncomingCallScript", new object[] {
                        PhoneNumber,
                        Script,
                        LicenseKey}, this.SetIncomingCallScriptOperationCompleted, userState);
        }
        
        private void OnSetIncomingCallScriptOperationCompleted(object arg) {
            if ((this.SetIncomingCallScriptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIncomingCallScriptCompleted(this, new SetIncomingCallScriptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/NotifyWS/GetIncomingCallScript", RequestNamespace="http://ws.cdyne.com/NotifyWS/", ResponseNamespace="http://ws.cdyne.com/NotifyWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIncomingCallScript(string PhoneNumber, string LicenseKey) {
            object[] results = this.Invoke("GetIncomingCallScript", new object[] {
                        PhoneNumber,
                        LicenseKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIncomingCallScriptAsync(string PhoneNumber, string LicenseKey) {
            this.GetIncomingCallScriptAsync(PhoneNumber, LicenseKey, null);
        }
        
        /// <remarks/>
        public void GetIncomingCallScriptAsync(string PhoneNumber, string LicenseKey, object userState) {
            if ((this.GetIncomingCallScriptOperationCompleted == null)) {
                this.GetIncomingCallScriptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIncomingCallScriptOperationCompleted);
            }
            this.InvokeAsync("GetIncomingCallScript", new object[] {
                        PhoneNumber,
                        LicenseKey}, this.GetIncomingCallScriptOperationCompleted, userState);
        }
        
        private void OnGetIncomingCallScriptOperationCompleted(object arg) {
            if ((this.GetIncomingCallScriptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIncomingCallScriptCompleted(this, new GetIncomingCallScriptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class UploadFileResponse {
        
        private bool uploadSuccessfulField;
        
        private string errorResponseField;
        
        private int uploadedLengthInSecondsField;
        
        /// <remarks/>
        public bool UploadSuccessful {
            get {
                return this.uploadSuccessfulField;
            }
            set {
                this.uploadSuccessfulField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorResponse {
            get {
                return this.errorResponseField;
            }
            set {
                this.errorResponseField = value;
            }
        }
        
        /// <remarks/>
        public int UploadedLengthInSeconds {
            get {
                return this.uploadedLengthInSecondsField;
            }
            set {
                this.uploadedLengthInSecondsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class Voice {
        
        private int voiceIDField;
        
        private string voiceNameField;
        
        private string voiceGenderField;
        
        private int voiceAgeField;
        
        private string voiceLanguageField;
        
        private string voiceSummaryField;
        
        /// <remarks/>
        public int VoiceID {
            get {
                return this.voiceIDField;
            }
            set {
                this.voiceIDField = value;
            }
        }
        
        /// <remarks/>
        public string VoiceName {
            get {
                return this.voiceNameField;
            }
            set {
                this.voiceNameField = value;
            }
        }
        
        /// <remarks/>
        public string VoiceGender {
            get {
                return this.voiceGenderField;
            }
            set {
                this.voiceGenderField = value;
            }
        }
        
        /// <remarks/>
        public int VoiceAge {
            get {
                return this.voiceAgeField;
            }
            set {
                this.voiceAgeField = value;
            }
        }
        
        /// <remarks/>
        public string VoiceLanguage {
            get {
                return this.voiceLanguageField;
            }
            set {
                this.voiceLanguageField = value;
            }
        }
        
        /// <remarks/>
        public string VoiceSummary {
            get {
                return this.voiceSummaryField;
            }
            set {
                this.voiceSummaryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class AreaCode {
        
        private string areaCodeNumberField;
        
        private string locationField;
        
        /// <remarks/>
        public string AreaCodeNumber {
            get {
                return this.areaCodeNumberField;
            }
            set {
                this.areaCodeNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class Response {
        
        private int responseCodeField;
        
        private string responseTextField;
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class LM_Functions {
        
        private string callerIDField;
        
        private string callerIDNameField;
        
        private byte voiceIDField;
        
        private string textToSayField;
        
        private byte tryCountField;
        
        private string licensekeyField;
        
        private string extensionField;
        
        private string transferNumberField;
        
        private short nextTryInSecondsField;
        
        private byte tTSRateField;
        
        private byte tTSVolumeField;
        
        private System.DateTime scheduledUTCDatetimeField;
        
        private int listIDField;
        
        private bool dialRecursiveListsField;
        
        /// <remarks/>
        public string CallerID {
            get {
                return this.callerIDField;
            }
            set {
                this.callerIDField = value;
            }
        }
        
        /// <remarks/>
        public string CallerIDName {
            get {
                return this.callerIDNameField;
            }
            set {
                this.callerIDNameField = value;
            }
        }
        
        /// <remarks/>
        public byte VoiceID {
            get {
                return this.voiceIDField;
            }
            set {
                this.voiceIDField = value;
            }
        }
        
        /// <remarks/>
        public string TextToSay {
            get {
                return this.textToSayField;
            }
            set {
                this.textToSayField = value;
            }
        }
        
        /// <remarks/>
        public byte TryCount {
            get {
                return this.tryCountField;
            }
            set {
                this.tryCountField = value;
            }
        }
        
        /// <remarks/>
        public string Licensekey {
            get {
                return this.licensekeyField;
            }
            set {
                this.licensekeyField = value;
            }
        }
        
        /// <remarks/>
        public string Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        /// <remarks/>
        public string TransferNumber {
            get {
                return this.transferNumberField;
            }
            set {
                this.transferNumberField = value;
            }
        }
        
        /// <remarks/>
        public short NextTryInSeconds {
            get {
                return this.nextTryInSecondsField;
            }
            set {
                this.nextTryInSecondsField = value;
            }
        }
        
        /// <remarks/>
        public byte TTSRate {
            get {
                return this.tTSRateField;
            }
            set {
                this.tTSRateField = value;
            }
        }
        
        /// <remarks/>
        public byte TTSVolume {
            get {
                return this.tTSVolumeField;
            }
            set {
                this.tTSVolumeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ScheduledUTCDatetime {
            get {
                return this.scheduledUTCDatetimeField;
            }
            set {
                this.scheduledUTCDatetimeField = value;
            }
        }
        
        /// <remarks/>
        public int ListID {
            get {
                return this.listIDField;
            }
            set {
                this.listIDField = value;
            }
        }
        
        /// <remarks/>
        public bool DialRecursiveLists {
            get {
                return this.dialRecursiveListsField;
            }
            set {
                this.dialRecursiveListsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class LM_DialReturn {
        
        private bool successField;
        
        private int batchIDField;
        
        private int responseCodeField;
        
        private string errorTextField;
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public int BatchID {
            get {
                return this.batchIDField;
            }
            set {
                this.batchIDField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorText {
            get {
                return this.errorTextField;
            }
            set {
                this.errorTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class LM_ListMembers {
        
        private int listMemberIDField;
        
        private string phoneNumberField;
        
        private string clientIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        /// <remarks/>
        public int ListMemberID {
            get {
                return this.listMemberIDField;
            }
            set {
                this.listMemberIDField = value;
            }
        }
        
        /// <remarks/>
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class LM_ListIDs {
        
        private int listIDField;
        
        private int parentListIDField;
        
        private string listNameField;
        
        /// <remarks/>
        public int ListID {
            get {
                return this.listIDField;
            }
            set {
                this.listIDField = value;
            }
        }
        
        /// <remarks/>
        public int ParentListID {
            get {
                return this.parentListIDField;
            }
            set {
                this.parentListIDField = value;
            }
        }
        
        /// <remarks/>
        public string ListName {
            get {
                return this.listNameField;
            }
            set {
                this.listNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class AdvancedNotifyRequest {
        
        private string phoneNumberToDialField;
        
        private string transferNumberField;
        
        private int voiceIDField;
        
        private string callerIDNumberField;
        
        private string callerIDNameField;
        
        private string textToSayField;
        
        private string licenseKeyField;
        
        private int tryCountField;
        
        private int nextTryInSecondsField;
        
        private System.DateTime uTCScheduledDateTimeField;
        
        private byte tTSrateField;
        
        private byte tTSvolumeField;
        
        private int maxCallLengthField;
        
        private string statusChangePostUrlField;
        
        private string referenceIDField;
        
        /// <remarks/>
        public string PhoneNumberToDial {
            get {
                return this.phoneNumberToDialField;
            }
            set {
                this.phoneNumberToDialField = value;
            }
        }
        
        /// <remarks/>
        public string TransferNumber {
            get {
                return this.transferNumberField;
            }
            set {
                this.transferNumberField = value;
            }
        }
        
        /// <remarks/>
        public int VoiceID {
            get {
                return this.voiceIDField;
            }
            set {
                this.voiceIDField = value;
            }
        }
        
        /// <remarks/>
        public string CallerIDNumber {
            get {
                return this.callerIDNumberField;
            }
            set {
                this.callerIDNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CallerIDName {
            get {
                return this.callerIDNameField;
            }
            set {
                this.callerIDNameField = value;
            }
        }
        
        /// <remarks/>
        public string TextToSay {
            get {
                return this.textToSayField;
            }
            set {
                this.textToSayField = value;
            }
        }
        
        /// <remarks/>
        public string LicenseKey {
            get {
                return this.licenseKeyField;
            }
            set {
                this.licenseKeyField = value;
            }
        }
        
        /// <remarks/>
        public int TryCount {
            get {
                return this.tryCountField;
            }
            set {
                this.tryCountField = value;
            }
        }
        
        /// <remarks/>
        public int NextTryInSeconds {
            get {
                return this.nextTryInSecondsField;
            }
            set {
                this.nextTryInSecondsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UTCScheduledDateTime {
            get {
                return this.uTCScheduledDateTimeField;
            }
            set {
                this.uTCScheduledDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public byte TTSrate {
            get {
                return this.tTSrateField;
            }
            set {
                this.tTSrateField = value;
            }
        }
        
        /// <remarks/>
        public byte TTSvolume {
            get {
                return this.tTSvolumeField;
            }
            set {
                this.tTSvolumeField = value;
            }
        }
        
        /// <remarks/>
        public int MaxCallLength {
            get {
                return this.maxCallLengthField;
            }
            set {
                this.maxCallLengthField = value;
            }
        }
        
        /// <remarks/>
        public string StatusChangePostUrl {
            get {
                return this.statusChangePostUrlField;
            }
            set {
                this.statusChangePostUrlField = value;
            }
        }
        
        /// <remarks/>
        public string ReferenceID {
            get {
                return this.referenceIDField;
            }
            set {
                this.referenceIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class Variable {
        
        private string variableNameField;
        
        private string variableValueField;
        
        /// <remarks/>
        public string VariableName {
            get {
                return this.variableNameField;
            }
            set {
                this.variableNameField = value;
            }
        }
        
        /// <remarks/>
        public string VariableValue {
            get {
                return this.variableValueField;
            }
            set {
                this.variableValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/NotifyWS/")]
    public partial class NotifyReturn {
        
        private int responseCodeField;
        
        private string responseTextField;
        
        private bool callAnsweredField;
        
        private long queueIDField;
        
        private int tryCountField;
        
        private bool demoField;
        
        private string digitsPressedField;
        
        private string machineDetectionField;
        
        private int durationField;
        
        private System.DateTime startTimeField;
        
        private System.DateTime endTimeField;
        
        private decimal minuteRateField;
        
        private string countryField;
        
        private bool callCompleteField;
        
        private string textToSayField;
        
        private Variable[] variableArrayField;
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseText {
            get {
                return this.responseTextField;
            }
            set {
                this.responseTextField = value;
            }
        }
        
        /// <remarks/>
        public bool CallAnswered {
            get {
                return this.callAnsweredField;
            }
            set {
                this.callAnsweredField = value;
            }
        }
        
        /// <remarks/>
        public long QueueID {
            get {
                return this.queueIDField;
            }
            set {
                this.queueIDField = value;
            }
        }
        
        /// <remarks/>
        public int TryCount {
            get {
                return this.tryCountField;
            }
            set {
                this.tryCountField = value;
            }
        }
        
        /// <remarks/>
        public bool Demo {
            get {
                return this.demoField;
            }
            set {
                this.demoField = value;
            }
        }
        
        /// <remarks/>
        public string DigitsPressed {
            get {
                return this.digitsPressedField;
            }
            set {
                this.digitsPressedField = value;
            }
        }
        
        /// <remarks/>
        public string MachineDetection {
            get {
                return this.machineDetectionField;
            }
            set {
                this.machineDetectionField = value;
            }
        }
        
        /// <remarks/>
        public int Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        public decimal MinuteRate {
            get {
                return this.minuteRateField;
            }
            set {
                this.minuteRateField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public bool CallComplete {
            get {
                return this.callCompleteField;
            }
            set {
                this.callCompleteField = value;
            }
        }
        
        /// <remarks/>
        public string TextToSay {
            get {
                return this.textToSayField;
            }
            set {
                this.textToSayField = value;
            }
        }
        
        /// <remarks/>
        public Variable[] VariableArray {
            get {
                return this.variableArrayField;
            }
            set {
                this.variableArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReturnSoundFileIDsCompletedEventHandler(object sender, ReturnSoundFileIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnSoundFileIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnSoundFileIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveSoundFileCompletedEventHandler(object sender, RemoveSoundFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveSoundFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveSoundFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RenameSoundFileCompletedEventHandler(object sender, RenameSoundFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameSoundFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameSoundFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadSoundFileCompletedEventHandler(object sender, UploadSoundFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSoundFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSoundFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UploadFileResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UploadFileResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSoundFileLengthCompletedEventHandler(object sender, GetSoundFileLengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSoundFileLengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSoundFileLengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSoundFileCompletedEventHandler(object sender, GetSoundFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSoundFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSoundFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTTSInULAWCompletedEventHandler(object sender, GetTTSInULAWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTTSInULAWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTTSInULAWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTTSInMP3CompletedEventHandler(object sender, GetTTSInMP3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTTSInMP3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTTSInMP3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSoundFileInMP3CompletedEventHandler(object sender, GetSoundFileInMP3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSoundFileInMP3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSoundFileInMP3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSoundFileURLCompletedEventHandler(object sender, GetSoundFileURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSoundFileURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSoundFileURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSoundFileInUlawCompletedEventHandler(object sender, GetSoundFileInUlawCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSoundFileInUlawCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSoundFileInUlawCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RecordSoundViaPhoneCallCompletedEventHandler(object sender, RecordSoundViaPhoneCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordSoundViaPhoneCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordSoundViaPhoneCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetQueueIDStatusCompletedEventHandler(object sender, GetQueueIDStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueueIDStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueueIDStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetQueueIDStatusesByPhoneNumberCompletedEventHandler(object sender, GetQueueIDStatusesByPhoneNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueueIDStatusesByPhoneNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueueIDStatusesByPhoneNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetQueueIDStatusWithAdvancedInfoCompletedEventHandler(object sender, GetQueueIDStatusWithAdvancedInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueueIDStatusWithAdvancedInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueueIDStatusWithAdvancedInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyPhoneEnglishBasicCompletedEventHandler(object sender, NotifyPhoneEnglishBasicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneEnglishBasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneEnglishBasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyPhoneBasicWithTransferCompletedEventHandler(object sender, NotifyPhoneBasicWithTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneBasicWithTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneBasicWithTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMultipleQueueIdStatusCompletedEventHandler(object sender, GetMultipleQueueIdStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleQueueIdStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleQueueIdStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyPhoneBasicCompletedEventHandler(object sender, NotifyPhoneBasicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneBasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneBasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyPhoneBasicWithTryCountCompletedEventHandler(object sender, NotifyPhoneBasicWithTryCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneBasicWithTryCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneBasicWithTryCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyPhoneAdvancedCompletedEventHandler(object sender, NotifyPhoneAdvancedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyPhoneAdvancedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyPhoneAdvancedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyMultiplePhoneBasicCompletedEventHandler(object sender, NotifyMultiplePhoneBasicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyMultiplePhoneBasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyMultiplePhoneBasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyMultiplePhoneBasicWithCPMCompletedEventHandler(object sender, NotifyMultiplePhoneBasicWithCPMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyMultiplePhoneBasicWithCPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyMultiplePhoneBasicWithCPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyMultiplePhoneBasicWithCPMandReferenceIDCompletedEventHandler(object sender, NotifyMultiplePhoneBasicWithCPMandReferenceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyMultiplePhoneBasicWithCPMandReferenceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyMultiplePhoneBasicWithCPMandReferenceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NotifyMultiplePhoneAdvancedCompletedEventHandler(object sender, NotifyMultiplePhoneAdvancedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyMultiplePhoneAdvancedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyMultiplePhoneAdvancedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyReturn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyReturn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelConferenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelNotifyCompletedEventHandler(object sender, CancelNotifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelNotifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelNotifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelNotifyByReferenceIDCompletedEventHandler(object sender, CancelNotifyByReferenceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelNotifyByReferenceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelNotifyByReferenceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ScriptListCompletedEventHandler(object sender, ScriptListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScriptListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScriptListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ScriptSaveCompletedEventHandler(object sender, ScriptSaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScriptSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScriptSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ScriptDeleteCompletedEventHandler(object sender, ScriptDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScriptDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScriptDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ScriptLoadCompletedEventHandler(object sender, ScriptLoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScriptLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScriptLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LicenseKeyVariableLoadCompletedEventHandler(object sender, LicenseKeyVariableLoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LicenseKeyVariableLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LicenseKeyVariableLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LicenseKeyVariableSaveCompletedEventHandler(object sender, LicenseKeyVariableSaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LicenseKeyVariableSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LicenseKeyVariableSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_GetListIDsByLicensekeyCompletedEventHandler(object sender, LM_GetListIDsByLicensekeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_GetListIDsByLicensekeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_GetListIDsByLicensekeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LM_ListIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LM_ListIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_GetListMembersByListIDCompletedEventHandler(object sender, LM_GetListMembersByListIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_GetListMembersByListIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_GetListMembersByListIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LM_ListMembers[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LM_ListMembers[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_DialListCompletedEventHandler(object sender, LM_DialListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_DialListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_DialListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LM_DialReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LM_DialReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_DialListAdvancedCompletedEventHandler(object sender, LM_DialListAdvancedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_DialListAdvancedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_DialListAdvancedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LM_DialReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LM_DialReturn)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_AddNewListCompletedEventHandler(object sender, LM_AddNewListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_AddNewListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_AddNewListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_AddListMemberCompletedEventHandler(object sender, LM_AddListMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_AddListMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_AddListMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_DeleteListCompletedEventHandler(object sender, LM_DeleteListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_DeleteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_DeleteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_DeleteListMemberCompletedEventHandler(object sender, LM_DeleteListMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_DeleteListMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_DeleteListMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_AlterListMemberCompletedEventHandler(object sender, LM_AlterListMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_AlterListMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_AlterListMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LM_AlterListIDCompletedEventHandler(object sender, LM_AlterListIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LM_AlterListIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LM_AlterListIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetResponseCodesCompletedEventHandler(object sender, GetResponseCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResponseCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResponseCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAvailableAreaCodesCompletedEventHandler(object sender, GetAvailableAreaCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableAreaCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableAreaCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AreaCode[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AreaCode[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAvailableIncomingNumbersCompletedEventHandler(object sender, GetAvailableIncomingNumbersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableIncomingNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableIncomingNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAssignedNumbersCompletedEventHandler(object sender, GetAssignedNumbersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssignedNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssignedNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getVoicesCompletedEventHandler(object sender, getVoicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVoicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVoicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Voice[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Voice[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AssignIncomingNumberCompletedEventHandler(object sender, AssignIncomingNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignIncomingNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignIncomingNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetIncomingCallScriptCompletedEventHandler(object sender, SetIncomingCallScriptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetIncomingCallScriptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetIncomingCallScriptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetIncomingCallScriptCompletedEventHandler(object sender, GetIncomingCallScriptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIncomingCallScriptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIncomingCallScriptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591